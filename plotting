# 0 = WSAS non-recovered
# 1 = WSAS recovered
# 2 = Healthy

for i in toplot.columns[2:]:
    plt.figure()
    sns.boxplot(x='outcome', y=i, data=toplot)
    sns.stripplot(x='outcome', y=i, size=4, color=".3", data=toplot)
    plt.xticks([0, 1, 2], ['NonReco', 'Reco', 'Healthy'])
    plt.title(i)
    pdf.savefig()
    plt.close()

# plot averaged weights
PC1_weights = pd.DataFrame(PC1_weights)
nonr_weight = PC1_weights[np.array(outcome) == '0']
reco_weight = PC1_weights[np.array(outcome) == '1']
heal_weight = PC1_weights[np.array(outcome) == '2']

# plot average weights normalized
areas = avg_features.columns

#RECOVERED
mean_reco = np.array(np.mean(reco_weight))
mean_reco_norm = (mean_reco - np.min(mean_reco)) / (np.max(mean_reco) - np.min(mean_reco))
features_reco = pd.DataFrame(mean_reco_norm.reshape(-1, len(areas)), columns=areas)
visualize.plot_features(features_reco)
plt.savefig("Feature_Reco.jpeg")
pdf.savefig()
plt.close()

# NON_Recovered
mean_nonr = np.array(np.mean(nonr_weight))
mean_nonr_norm = (mean_nonr - np.min(mean_nonr)) / (np.max(mean_nonr) - np.min(mean_nonr))
features_nonr = pd.DataFrame(mean_nonr_norm.reshape(-1, len(areas)), columns=areas)
visualize.plot_features(features_nonr)
plt.savefig("Feature_Nonreco.jpeg")
pdf.savefig()
plt.close()

# HEALTHY
mean_heal = np.array(np.mean(heal_weight))
mean_heal_norm = (mean_heal - np.min(mean_heal)) / (np.max(mean_heal) - np.min(mean_heal))
features_heal = pd.DataFrame(mean_heal_norm.reshape(-1, len(areas)), columns=areas)
visualize.plot_features(features_heal)
plt.savefig("Feature_Healthy.jpeg")
pdf.savefig()
plt.close()

cosine_non = distance.cdist(nonr_weight, nonr_weight, 'cosine').reshape(-1)
cosine_reco = distance.cdist(reco_weight, reco_weight, 'cosine').reshape(-1)
cosine_nonr_reco = distance.cdist(reco_weight, nonr_weight, 'cosine').reshape(-1)
cosine_heal_reco = distance.cdist(heal_weight, reco_weight, 'cosine').reshape(-1)
cosine_heal_nonr = distance.cdist(heal_weight, nonr_weight, 'cosine').reshape(-1)

plt.figure()
plt.violinplot([cosine_non[cosine_non > 0.0001],
                cosine_reco[cosine_reco > 0.0001],
                cosine_nonr_reco[cosine_nonr_reco > 0.0001],
                cosine_heal_reco[cosine_heal_reco > 0.0001],
                cosine_heal_nonr[cosine_heal_nonr > 0.0001]])
plt.xticks([1,2,3,4,5],['recovered','nonrecovered','between r-n','between h-r','between h-n'])
plt.title('Cosine Similarity')
plt.savefig("Cosine_Sim.jpeg")
pdf.savefig()
plt.close()
